{"version":3,"sources":["calc/wsdeck.js","calc/execute.js","Damage.js","Concentrate.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","createDeck","nDeck","cx","deck","Array","i","ran","Math","floor","random","j","pos","cancelOrNot","damage","d","dec_i","shift","cancel","concentration","num","h","hit","ws","require","averageConcentration","deckNum","cxNum","flipNum","loopNum","total","averageDamage","flipArray","totalDamage","turnDamage","forEach","dmg","res","console","log","defaultDamageArray","defaultResult","Concentrate","useState","setDeckNum","setCxNum","damageArray","setDamageArray","setLoopNum","resDamage","setResDamage","value","onChange","e","target","type","onClick","concat","map","Number","slice","filter","index","hidden","length","setFlipNum","resConcentrate","setResConcentrate","App","className","style","fontSize","marginBottom","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3b77685d.chunk.js","sourcesContent":["\"use strict\";\r\n\r\nmodule.exports = {\r\n  /**\r\n   * デッキを作成します。\r\n   * @param {number} nDeck 山札枚数\r\n   * @param {number} cx クライマックス枚数\r\n   * @return {Array.<number>} deck\r\n   */\r\n  createDeck: function (nDeck, cx) {\r\n    const deck = new Array(nDeck);\r\n    for (let i = 0; i < nDeck; i++) {\r\n      deck[i] = 0;\r\n    }\r\n\r\n    for (let i = 0; i < cx; i++) {\r\n      const ran = Math.floor(Math.random() * (nDeck - i));\r\n      for (let j = 0, pos = 0; j < nDeck; j++) {\r\n        if (!deck[j]) {\r\n          if (ran == pos) deck[j] = 1;\r\n          pos++;\r\n        }\r\n      }\r\n    }\r\n    return deck;\r\n  },\r\n\r\n  /**\r\n   * 山札をめくりキャンセルするかどうかを確認します。\r\n   * @param {Array.<number>} deck デッキ\r\n   * @param {number} damage 打点\r\n   * @return {{deck: Array.<number>, cancel: boolean}} {deck:deck, cancel:true/false}\r\n   */\r\n  cancelOrNot: function (deck, damage) {\r\n    let d = deck;\r\n    for (let dec_i = 0; dec_i < damage; dec_i++) {\r\n      if (d[0]) {\r\n        d.shift();\r\n        return { deck: d, cancel: true };\r\n      } else {\r\n        d.shift();\r\n      }\r\n    }\r\n    return { deck: d, cancel: false };\r\n  },\r\n\r\n  /**\r\n   * 山札を規定枚数めくります。\r\n   * @param {*} deck デッキ\r\n   * @param {*} num 枚数\r\n   * @return {*} {deck:deck, hit:hit数}\r\n   */\r\n  concentration: function (deck, num) {\r\n    let d = deck;\r\n    let h = 0;\r\n    for (let dec_i = 0; dec_i < num; dec_i++) {\r\n      if (d[0]) h++;\r\n      d.shift();\r\n    }\r\n    return { deck: d, hit: h };\r\n  },\r\n};\r\n","\"use strict\";\r\n\r\nconst ws = require(\"./wsdeck.js\");\r\n\r\n/**\r\n * X枚集中を1回打った時のHit数（率）\r\n * @param {number} deckNum デッキ枚数\r\n * @param {number} cxNum CX枚数\r\n * @param {number} flipNumber めくる枚数X\r\n * @param {number} loopNum ループ回数\r\n */\r\nfunction averageConcentration(deckNum, cxNum, flipNum, loopNum = 10000) {\r\n  let total = 0;\r\n  for (let i = 1; i < loopNum; i++) {\r\n    // デッキの内容を設定(CXを含む山札枚数,CX)\r\n    let deck = ws.createDeck(deckNum, cxNum);\r\n    // めくる(さっき作ったデッキ,めくる枚数)\r\n    deck = ws.concentration(deck, flipNum);\r\n    total += deck.hit;\r\n  }\r\n  // 平均Hit率\r\n  return total / loopNum;\r\n}\r\n\r\n/**\r\n * 指定のダメージを与えたときの平均打点\r\n * @param {number} deckNum デッキ枚数\r\n * @param {number} cxNum CX枚数\r\n * @param {Array.<number>} flipArray ダメージ配列(ex. [2,2,2])\r\n * @param {number} loopNum ループ回数\r\n */\r\nfunction averageDamage(deckNum, cxNum, flipArray, loopNum = 10000) {\r\n  let totalDamage = 0;\r\n  for (let i = 0; i < loopNum; i++) {\r\n    let turnDamage = 0;\r\n    let deck = ws.createDeck(deckNum, cxNum);\r\n    // 与えたい打点[2点,2点,2点]\r\n    const DMG_ARRAY = flipArray;\r\n    DMG_ARRAY.forEach((dmg) => {\r\n      const res = ws.cancelOrNot(deck, dmg);\r\n      deck = res.deck;\r\n      if (!res.cancel) turnDamage += dmg;\r\n    });\r\n    totalDamage += turnDamage;\r\n  }\r\n  // 平均打点\r\n  console.log(totalDamage / loopNum);\r\n  return totalDamage / loopNum;\r\n}\r\n\r\nexport { averageConcentration, averageDamage };\r\n","import React, { useState } from \"react\";\nimport { averageDamage } from \"./calc/execute\";\n\nconst defaultDeckNum = 50;\nconst defaultCxNum = 8;\nconst defaultDamageArray = [2, 2, 2];\nconst defaultLoopNum = 10000;\nconst defaultResult = averageDamage(\n  defaultDeckNum,\n  defaultCxNum,\n  defaultDamageArray,\n  defaultLoopNum\n);\n\nexport default function Concentrate() {\n  const [deckNum, setDeckNum] = useState(defaultDeckNum);\n  const [cxNum, setCxNum] = useState(defaultCxNum);\n  const [damageArray, setDamageArray] = useState(defaultDamageArray);\n  const [loopNum, setLoopNum] = useState(defaultLoopNum);\n  const [resDamage, setResDamage] = useState(defaultResult);\n\n  return (\n    <>\n      <div>\n        デッキ枚数\n        <input\n          value={deckNum}\n          onChange={(e) => setDeckNum(e.target.value)}\n          type=\"number\"\n        />\n      </div>\n      <div>\n        CX枚数\n        <input\n          value={cxNum}\n          onChange={(e) => setCxNum(e.target.value)}\n          type=\"numnber\"\n        />\n      </div>\n      <div>\n        ダメージ\n        <button onClick={() => setDamageArray(damageArray.concat([1]))}>\n          +\n        </button>\n        {damageArray.map((e, i) => (\n          <div>\n            <input\n              value={e}\n              onChange={(e) => {\n                damageArray[i] = Number(e.target.value);\n                setDamageArray(damageArray.slice());\n              }}\n              type=\"number\"\n            />\n            <button\n              onClick={() =>\n                setDamageArray(\n                  damageArray.filter((value, index) => index !== i)\n                )\n              }\n              hidden={damageArray.length < 2}\n            >\n              -\n            </button>\n          </div>\n        ))}\n      </div>\n      <div>\n        計算ループ回数\n        <input\n          value={loopNum}\n          onChange={(e) => setLoopNum(e.target.value)}\n          type=\"numnber\"\n        />\n      </div>\n      <div>\n        <button\n          onClick={(e) =>\n            setResDamage(averageDamage(deckNum, cxNum, damageArray, loopNum))\n          }\n        >\n          ダメージ期待値計算ボタン\n        </button>\n      </div>\n      <div>ダメージ期待値 = {resDamage}</div>\n    </>\n  );\n}\n","import React, { useState } from \"react\";\nimport { averageConcentration } from \"./calc/execute\";\n\nconst defaultDeckNum = 50;\nconst defaultCxNum = 8;\nconst defaultFlipNum = 4;\nconst defaultLoopNum = 10000;\nconst defaultResult = averageConcentration(\n  defaultDeckNum,\n  defaultCxNum,\n  defaultFlipNum,\n  defaultLoopNum\n);\n\nexport default function Concentrate() {\n  const [deckNum, setDeckNum] = useState(defaultDeckNum);\n  const [cxNum, setCxNum] = useState(defaultCxNum);\n  const [flipNum, setFlipNum] = useState(defaultFlipNum);\n  const [loopNum, setLoopNum] = useState(defaultLoopNum);\n  const [resConcentrate, setResConcentrate] = useState(defaultResult);\n\n  return (\n    <>\n      <div>\n        デッキ枚数\n        <input\n          value={deckNum}\n          onChange={(e) => setDeckNum(e.target.value)}\n          type=\"number\"\n        />\n      </div>\n      <div>\n        CX枚数\n        <input\n          value={cxNum}\n          onChange={(e) => setCxNum(e.target.value)}\n          type=\"numnber\"\n        />\n      </div>\n      <div>\n        めくる枚数\n        <input\n          value={flipNum}\n          onChange={(e) => setFlipNum(e.target.value)}\n          type=\"numnber\"\n        />\n      </div>\n      <div>\n        計算ループ回数\n        <input\n          value={loopNum}\n          onChange={(e) => setLoopNum(e.target.value)}\n          type=\"numnber\"\n        />\n      </div>\n      <div>\n        <button\n          onClick={(e) =>\n            setResConcentrate(\n              averageConcentration(deckNum, cxNum, flipNum, loopNum)\n            )\n          }\n        >\n          集中ヒット率計算ボタン\n        </button>\n      </div>\n      <div>集中ヒット率 = {resConcentrate}</div>\n    </>\n  );\n}\n","import React from \"react\";\nimport Damage from \"./Damage\";\nimport \"./App.css\";\nimport Concentrate from \"./Concentrate\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <body className=\"App-body\">\n        <div>\n          <div style={{ fontSize: \"1.5rem\" }}>集中ヒット率計算</div>\n          <Concentrate />\n        </div>\n        <div style={{ marginBottom: \"30px\" }} />\n        <div>\n          <div style={{ fontSize: \"1.5rem\" }}>ダメージ期待値計算</div>\n          <Damage />\n        </div>\n      </body>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}